{"version":3,"file":"static/webpack/static\\development\\pages\\election\\company_dashboard.js.00d7eb7cc1309912e91f.hot-update.js","sources":["webpack:///./pages/election/company_dashboard.js"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Step, Icon, Menu, Sidebar, Container, Modal, Card, Header, Button, Item } from 'semantic-ui-react';\r\nimport Layout from '../../components/Layout';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport 'chartjs-plugin-annotation';\r\nimport Election from '../../Ethereum/election';\r\nimport Cookies from 'js-cookie';\r\nimport web3 from '../../Ethereum/web3';\r\nimport { Link, Router } from '../../routes';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nvar b = 0;\r\nlet cand = [];\r\nlet graphEmail = [];\r\nlet graphVotes = [];\r\n\r\nconst options = {\r\n\tmaintainAspectRatio: true,\r\n\tresponsive: true,\r\n\tscales: {\r\n\t\tyAxes: [\r\n\t\t\t{\r\n\t\t\t\theight: '500px',\r\n\t\t\t\tstacked: true,\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: true,\r\n\t\t\t\t\tcolor: 'rgba(255,99,132,0.2)',\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t\txAxes: [\r\n\t\t\t{\r\n\t\t\t\twidth: '500px',\r\n\t\t\t\tgridLines: {\r\n\t\t\t\t\tdisplay: false,\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t],\r\n\t},\r\n};\r\n\r\nconst data = {\r\n\tlabels: graphEmail,\r\n\tdatasets: [\r\n\t\t{\r\n\t\t\tlabel: 'Vote Counts',\r\n\t\t\tbackgroundColor: 'rgba(255,99,132,0.2)',\r\n\t\t\tborderColor: 'rgba(255,99,132,1)',\r\n\t\t\tborderWidth: 2,\r\n\t\t\thoverBackgroundColor: 'rgba(255,99,132,0.4)',\r\n\t\t\thoverBorderColor: 'rgba(255,99,132,1)',\r\n\t\t\tdata: graphVotes,\r\n\t\t},\r\n\t],\r\n};\r\n\r\nclass ContainerExampleContainer extends Component {\r\n\tstate = {\r\n\t\telection_address: Cookies.get('address'),\r\n\t\telection_name: '',\r\n\t\telection_desc: '',\r\n\t\tvoters: 0,\r\n\t\tcandidates: 0,\r\n\t\tvisible: false,\r\n\t\tloading: false,\r\n\t\tb: 0,\r\n\t};\r\n\tasync componentDidMount() {\r\n\t\tvar http = new XMLHttpRequest();\r\n\t\tvar url = '/voter/';\r\n\t\tvar params = 'election_address=' + Cookies.get('address');\r\n\t\thttp.open('POST', url, true);\r\n\t\t//Send the proper header information along with the request\r\n\t\thttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n\t\thttp.onreadystatechange = function () {\r\n\t\t\t//Call a function when the state changes.\r\n\t\t\tif (http.readyState == 4 && http.status == 200) {\r\n\t\t\t\tvar responseObj = JSON.parse(http.responseText);\r\n\t\t\t\tif (responseObj.status == 'success') {\r\n\t\t\t\t\tb = responseObj.count;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\thttp.send(params);\r\n\t\ttry {\r\n\t\t\tconst add = Cookies.get('address');\r\n\t\t\tconst election = Election(add);\r\n\t\t\tconst summary = await election.methods.getElectionDetails().call();\r\n\t\t\tconst v = await election.methods.getNumOfVoters().call();\r\n\t\t\tthis.setState({ voters: v });\r\n\t\t\tconst c = await election.methods.getNumOfCandidates().call();\r\n\t\t\tthis.setState({ candidates: c });\r\n\t\t\tthis.setState({\r\n\t\t\t\telection_name: summary[0],\r\n\t\t\t\telection_desc: summary[1],\r\n\t\t\t});\r\n\r\n\t\t\tfor (let i = 0; i < c; i++) {\r\n\t\t\t\tconst tp = await election.methods.getCandidate(i).call();\r\n\t\t\t\tgraphEmail.push(tp[0]);\r\n\t\t\t\tgraphVotes.push(tp[3]);\r\n\t\t\t}\r\n\t\t\tthis.returnGraph();\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err.message);\r\n\t\t\talert('Redirecting you to login page...');\r\n\t\t\tRouter.pushRoute('/company_login');\r\n\t\t}\r\n\t\tthis.setState({ b: b });\r\n\t}\r\n\r\n\tgetElectionDetails = () => {\r\n\t\tconst { election_name, election_desc } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div style={{ marginLeft: '43%', marginBottom: '2%', marginTop: '2%', float: 'left' }}>\r\n\t\t\t\t<Header as=\"h2\">\r\n\t\t\t\t\t<Icon name=\"address card\" />\r\n\t\t\t\t\t<Header.Content>\r\n\t\t\t\t\t\t{election_name}\r\n\t\t\t\t\t\t<Header.Subheader>{election_desc}</Header.Subheader>\r\n\t\t\t\t\t</Header.Content>\r\n\t\t\t\t</Header>\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\tCardExampleGroupProps = () => <Card.Group></Card.Group>;\r\n\tGridExampleGrid = () => <Grid>{columns}</Grid>;\r\n\tSidebarExampleVisible = () => (\r\n\t\t<Sidebar.Pushable>\r\n\t\t\t<Sidebar\r\n\t\t\t\tas={Menu}\r\n\t\t\t\tanimation=\"overlay\"\r\n\t\t\t\ticon=\"labeled\"\r\n\t\t\t\tinverted\r\n\t\t\t\tvertical\r\n\t\t\t\tvisible\r\n\t\t\t\twidth=\"thin\"\r\n\t\t\t\tstyle={{ backgroundColor: 'white', borderWidth: '10px' }}\r\n\t\t\t>\r\n\t\t\t\t<Menu.Item as=\"a\" style={{ color: 'grey' }}>\r\n\t\t\t\t\t<h2>MENU</h2>\r\n\t\t\t\t\t<hr />\r\n\t\t\t\t</Menu.Item>\r\n\t\t\t\t<Link route={`/election/${Cookies.get('address')}/company_dashboard`}>\r\n\t\t\t\t\t<a>\r\n\t\t\t\t\t\t<Menu.Item style={{ color: 'grey', fontColor: 'grey' }}>\r\n\t\t\t\t\t\t\t<Icon name=\"dashboard\" />\r\n\t\t\t\t\t\t\tDashboard\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<Link route={`/election/${Cookies.get('address')}/candidate_list`}>\r\n\t\t\t\t\t<a>\r\n\t\t\t\t\t\t<Menu.Item as=\"a\" style={{ color: 'grey' }}>\r\n\t\t\t\t\t\t\t<Icon name=\"user outline\" />\r\n\t\t\t\t\t\t\tCandidate List\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<Link route={`/election/${Cookies.get('address')}/voting_list`}>\r\n\t\t\t\t\t<a>\r\n\t\t\t\t\t\t<Menu.Item as=\"a\" style={{ color: 'grey' }}>\r\n\t\t\t\t\t\t\t<Icon name=\"list\" />\r\n\t\t\t\t\t\t\tVoter List\r\n\t\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</Link>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<Button onClick={this.signOut} style={{ backgroundColor: 'white' }}>\r\n\t\t\t\t\t<Menu.Item as=\"a\" style={{ color: 'grey' }}>\r\n\t\t\t\t\t\t<Icon name=\"sign out\" />\r\n\t\t\t\t\t\tSign Out\r\n\t\t\t\t\t</Menu.Item>\r\n\t\t\t\t</Button>\r\n\t\t\t</Sidebar>\r\n\t\t</Sidebar.Pushable>\r\n\t);\r\n\tsignOut() {\r\n\t\tCookies.remove('address');\r\n\t\tCookies.remove('company_email');\r\n\t\tCookies.remove('company_id');\r\n\t\talert('Logging out.');\r\n\t\tRouter.pushRoute('/homepage');\r\n\t}\r\n\tendElection = async event => {\r\n\t\tlet candidate = 0;\r\n\t\ttry {\r\n\t\t\tthis.setState({ loading: true });\r\n\t\t\tconst add = Cookies.get('address');\r\n\t\t\t// console.log(\"the address is\",add,this.state.election_name,this.state.election_name)\r\n\t\t\t// const election = Election(\"0x9C8D481f17b3cf9c8C11b516134FD4db1689223C\");\r\n\t\t\t// console.log(\"the election is\",election)\r\n\t\t\tconst c =  this.state.candidates\r\n\t\t\tlet winner = {}\r\n\t\t\tlet largestVotes = 0;\r\n\t\t\tfor (let i = 0; i < c; i++) {\r\n\t\t\t\tconst tp = await election.methods.getCandidate(i).call();\r\n\t\t\t\tconsole.log(\"the candiate is\",tp)\r\n\t\t\t\tif(largestVotes < tp[3]){\r\n\t\t\t\t\twinner = tp;\r\n\t\t\t\t\tlargestVotes = tp[3]\r\n\t\t\t\t}\r\n\t\t\t\tgraphVotes.push(tp[3]);\r\n\t\t\t}\r\n\t\t\tconsole.log(\"the candidate is\",winner,\"with votes\",largestVotes)\r\n\t\t\tcand = await election.methods.getCandidate(candidate).call();\r\n\t\t\tvar http = new XMLHttpRequest();\r\n\t\t\tvar url = '/voter/resultMail';\r\n\t\t\tvar params =\r\n\t\t\t\t'election_address=' +\r\n\t\t\t\tCookies.get('address') +\r\n\t\t\t\t'&election_name=' +\r\n\t\t\t\tthis.state.election_name +\r\n\t\t\t\t'&candidate_email=' +\r\n\t\t\t\tcand[4] +\r\n\t\t\t\t'&winner_candidate=' +\r\n\t\t\t\tcand[0];\r\n\t\t\thttp.open('POST', url, true);\r\n\t\t\t//Send the proper header information along with the request\r\n\t\t\thttp.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n\t\t\thttp.onreadystatechange = function () {\r\n\t\t\t\t//Call a function when the state changes.\r\n\t\t\t\tif (http.readyState == 4 && http.status == 200) {\r\n\t\t\t\t\tvar responseObj = JSON.parse(http.responseText);\r\n\t\t\t\t\tif (responseObj.status == 'success') {\r\n\t\t\t\t\t\talert('Mail sent!');\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\talert(responseObj.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t\tthis.setState({ loading: true });\r\n\t\t\thttp.send(params);\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(\"the error is\",err.message);\r\n\t\t}\r\n\t};\r\n\r\n\treturnModal = () => <h1>I won the election</h1>;\r\n\r\n\treturnGraph = () => <Bar data={data} width={120} height={50} options={options} />;\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<title>Dashboard</title>\r\n\t\t\t\t\t<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"../../static/logo3.png\" />\r\n\t\t\t\t</Helmet>\r\n\t\t\t\t<Grid>\r\n\t\t\t\t\t<Grid.Row>\r\n\t\t\t\t\t\t<Grid.Column width={2}>{this.SidebarExampleVisible()}</Grid.Column>\r\n\r\n\t\t\t\t\t\t<Layout>\r\n\t\t\t\t\t\t\t<Grid.Column width={16}>\r\n\t\t\t\t\t\t\t\t{this.getElectionDetails()}\r\n\t\t\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\t\t\tnegative\r\n\t\t\t\t\t\t\t\t\tstyle={{ float: 'right', marginTop: '2%' }}\r\n\t\t\t\t\t\t\t\t\tonClick={this.endElection}\r\n\t\t\t\t\t\t\t\t\tloading={this.state.loading}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\tEnd election\r\n\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t<Step.Group style={{ minWidth: 1130, minHeight: 90 }}>\r\n\t\t\t\t\t\t\t\t\t<Step icon=\"users\" title=\"Voters\" description={this.state.b} />\r\n\t\t\t\t\t\t\t\t\t<Step icon=\"user outline\" title=\"Candidates\" description={this.state.candidates} />\r\n\t\t\t\t\t\t\t\t\t<Step\r\n\t\t\t\t\t\t\t\t\t\ticon=\"chart bar outline\"\r\n\t\t\t\t\t\t\t\t\t\ttitle=\"Total Votes\"\r\n\t\t\t\t\t\t\t\t\t\tdescription={this.state.voters}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t</Step.Group>\r\n\t\t\t\t\t\t\t\t{this.CardExampleGroupProps()}\r\n\r\n\t\t\t\t\t\t\t\t<Grid.Column>\r\n\t\t\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t\t\t<div className=\"he\">\r\n\t\t\t\t\t\t\t\t\t\t<style jsx>{`\r\n\t\t\t\t\t\t\t\t\t\t\t.he {\r\n\t\t\t\t\t\t\t\t\t\t\t\theight: 50%;\r\n\t\t\t\t\t\t\t\t\t\t\t\tmax-width: 100%;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t`}</style>\r\n\t\t\t\t\t\t\t\t\t\t{this.returnGraph()}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t\t</Grid.Column>\r\n\t\t\t\t\t\t</Layout>\r\n\t\t\t\t\t</Grid.Row>\r\n\t\t\t\t</Grid>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ContainerExampleContainer;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;;;;;AAFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AASA;AAEA;AACA;AACA;AADA;AAFA;AAZA;AAHA;AAyBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AACA;AAcA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAqDA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AARA;AAUA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAKA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AA3CA;AACA;;AAwDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAYA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAnBA;AAWA;AAXA;AAAA;AACA;AADA;AAoBA;AApBA;AAAA;AACA;AADA;AAqBA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAhDA;AAAA;AACA;AADA;AAAA;AAAA;AAkDA;AACA;AAnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAqDA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;AA/KA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAhBA;AAkBA;AACA;AAnBA;AAAA;AACA;AADA;AAoBA;AApBA;AAAA;AACA;AADA;AAqBA;AACA;AAAA;AAAA;AAtBA;AAAA;AACA;AADA;AAuBA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAKA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AA+BA;AACA;AACA;AACA;AAlCA;AA8BA;AA9BA;AAAA;AACA;AADA;AAmCA;AAnCA;AAAA;AACA;AADA;AAAA;AAAA;AAqCA;AACA;AACA;AACA;AAxCA;AAyCA;AAAA;AAAA;AACA;AA1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;AA8GA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA2DA;AACA;AAIA;AAAA;AAAA;AAAA;AAIA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAUA;AAAA;AAAA;AAAA;AAgBA;;;;AA9OA;AACA;AAgPA;;;;A","sourceRoot":""}